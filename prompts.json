{
    "__main__": {},
    "agents": {
        "parser_agent": {
            "SimpleDrainLogParserState": {},
            "SimpleDrainLogParserAgent": {
                "run": "no prompts",
                "_generate_log_format": "Analyze the following sample log lines and determine the optimal log format string suitable for the Drain log parsing algorithm.\nOnly output the log format string itself, containing placeholders like <Content>, <Date>, <Time>, <Level>, <Component>, <IP>, etc.\n\nenclosed in angle brackets.\n\n\nSample Logs:\n---\n\n{sample_logs}\n\n---\nLog Format:\n",
                "_run_drain_parser": "no prompts",
                "_call_llm_for_format": "Analyze the following sample log lines and determine the optimal log format string suitable for the Drain log parsing algorithm.\nOnly output the log format string itself, containing placeholders like <Content>, <Date>, <Time>, <Level>, <Component>, <IP>, etc.\n\nenclosed in angle brackets.\n\n\nSample Logs:\n---\n\n{sample_logs}\n\n---\nLog Format:\n"
            },
            "GroupLogParserAgent": {
                "fetch_groups": "no prompts",
                "parse_all_logs": "no prompts",
                "_update_progress_bar": "no prompts",
                "run": "no prompts"
            },
            "schema": {},
            "LogFormatSchema": {},
            "SimpleGrokLogParserState": {},
            "GrokPatternSchema": {},
            "SimpleGrokLogParserAgent": {
                "run": "no prompts",
                "_generate_grok_pattern": "Analyze the following sample log lines. Your task is to create the single best Grok pattern string suitable for parsing these lines using the pygrok library. \n\nThe pattern should cover the entire log line structure from beginning to end.\nUse standard Grok patterns like %%{{TIMESTAMP_ISO8601:timestamp}}, %%{{LOGLEVEL:level}}, %%{{IP:client_ip}}, %%{{NUMBER:num}}, %%{{WORD:word}}, %%{{JAVACLASS:component}}, %%{{GREEDYDATA:message}}, %%{{URIPATHPARAM:url}}, etc. Choose meaningful field names (e.g., 'timestamp', 'level', 'pid', 'component', 'client_ip', 'message').\nPay close attention to literal characters (like '[', ']', 'status:', 'len:') and delimiters (spaces). Escape special regex characters within literals if necessary (e.g., use \\[%{{DATA:req_id}}\\] for a request ID in brackets).\n\nOutput *only* the final Grok pattern string itself, nothing else.\n\nSample Logs:\n---\n{sample_logs}\n---\n\nGrok Pattern String:",
                "_run_grok_parser": "no prompts"
            }
        },
        "agent_abc": {
            "Agent": {
                "_build_graph": "no prompts",
                "run": "no prompts"
            }
        },
        "es_parser_agent": {
            "ESGroupParserAgent": {
                "_get_log_format_from_llm": "no prompts",
                "_get_sample_lines": "no prompts",
                "run": "no prompts"
            },
            "AllGroupsParserAgent": {
                "_get_all_groups": "no prompts",
                "run": "no prompts"
            },
            "GrokPatternSchema": {},
            "ScrollGrokParserState": {},
            "SingleGroupParseGraphState": {},
            "AllGroupsParserState": {},
            "ScrollGrokParserAgent": {
                "_initialize_grok": "no prompts",
                "_process_single_hit": "no prompts",
                "_process_batch": "no prompts",
                "_flush_batch": "no prompts",
                "run": "no prompts"
            },
            "SingleGroupParserAgent": {
                "_start_node": "no prompts",
                "_generate_grok_node": "Analyze the following sample log lines. Your task is to create the single best Grok pattern string suitable for parsing these lines using the pygrok library.\n\nThe pattern should cover the entire log line structure. Use standard Grok patterns and be precise in capturing meaningful fields.\n\n**Timestamp Handling Instructions:**\n1. Identify any timestamp present in the log lines.\n2. If the timestamp is already in or can be directly parsed into ISO 8601 format (e.g., 'YYYY-MM-DDTHH:MM:SS.sssZ' or similar like `%{{TIMESTAMP_ISO8601:your_field_name}}`), please capture it into a field named `event_timestamp`.\n3. If the timestamp is in a non-standard format that cannot be easily parsed to ISO 8601 directly with a simple Grok field, capture the raw timestamp string into a field named `raw_event_timestamp`. Also, try to capture its distinct components (year, month, day, time) if possible.\n4. Regardless of how it's captured (direct ISO or raw string/components), ensure there's a primary field named `event_timestamp` representing the main timestamp information.\n\nOutput *only* the final Grok pattern string itself. Do not include any other text or explanation.\n\nSample Logs:\n---```\n{sample_logs_for_generation}\n```---\n\n{last_failed_pattern_context}",
                "_validate_pattern_node": "no prompts",
                "_parse_all_node": "no prompts",
                "_fallback_node": "no prompts",
                "_prepare_for_retry_node": "no prompts",
                "_decide_after_generate": "no prompts",
                "_decide_after_validation": "no prompts",
                "_build_graph": "no prompts",
                "run": "no prompts"
            }
        }
    },
    "config": {
        "config": {}
    },
    "utils": {
        "data_struct": {
            "BaseData": {
                "to_dict": "no prompts"
            },
            "LineOfLogFile": {
                "to_dict": "no prompts"
            },
            "LastLineRead": {},
            "LogFile": {
                "add_file_description": "no prompts",
                "to_dict": "no prompts",
                "get_total_lines": "no prompts",
                "get_snapshot": "no prompts"
            },
            "Event": {
                "to_dict": "no prompts"
            }
        },
        "database": {
            "Database": {
                "insert": "no prompts",
                "single_search": "no prompts",
                "update": "no prompts",
                "delete": "no prompts",
                "set_vector_store": "no prompts"
            },
            "ElasticsearchDatabase": {
                "insert": "no prompts",
                "single_search": "no prompts",
                "scroll_search": "no prompts",
                "update": "no prompts",
                "delete": "no prompts",
                "_connect": "no prompts",
                "set_vector_store": "no prompts",
                "random_sample": "no prompts",
                "add_alias": "no prompts",
                "count_docs": "no prompts",
                "get_unique_values_composite": "no prompts",
                "get_unique_values": "no prompts",
                "scroll_and_process_batches": "no prompts",
                "bulk_operation": "no prompts",
                "bulk_index": "no prompts",
                "get_sample_lines": "no prompts"
            }
        },
        "prompts_manager": {
            "PromptsManager": {
                "_ensure_git_repo": "no prompts",
                "_load_prompts": "no prompts",
                "_save_prompts": "no prompts",
                "_update_prompt_store": "no prompts",
                "_update_prompt_store_recursive": "no prompts",
                "_hard_update_prompt_store": "no prompts",
                "_hard_update_prompt_store_recursive": "no prompts",
                "_get_nested_value": "no prompts",
                "_set_nested_value": "no prompts",
                "list_prompts": "no prompts",
                "add_prompt": "no prompts",
                "delete_keys": "no prompts",
                "_search_prompt_recursive": "no prompts",
                "get_prompt": "no prompts",
                "list_versions": "no prompts",
                "revert_version": "no prompts",
                "show_diff": "no prompts"
            }
        },
        "collector": {
            "Collector": {
                "insert_group_to_db": "no prompts",
                "group_files": "no prompts",
                "collect_logs": "no prompts",
                "collect_events": "no prompts",
                "insert_events_to_db": "no prompts",
                "insert_logs_to_db": "no prompts",
                "insert_very_large_logs_into_db": "no prompts",
                "_get_last_line_read": "no prompts",
                "_save_last_line_read": "no prompts",
                "_clear_records": "no prompts"
            }
        },
        "chunk_manager": {
            "ESTextChunkManager": {
                "_build_chunk": "no prompts",
                "_get_all_hits": "no prompts",
                "is_end": "no prompts",
                "get_next_chunk": "no prompts",
                "get_current_chunk": "no prompts"
            }
        },
        "logger": {
            "Logger": {
                "info": "no prompts",
                "debug": "no prompts",
                "warning": "no prompts",
                "error": "no prompts",
                "critical": "no prompts",
                "exception": "no prompts"
            }
        },
        "llm_model": {
            "LLMModel": {
                "_wait_for_rate_limit": "no prompts",
                "_update_last_call_time": "no prompts",
                "generate": "no prompts",
                "token_count": "no prompts"
            },
            "GeminiModel": {
                "token_count": "no prompts",
                "generate": "no prompts"
            },
            "TestSchemaDirect": {}
        },
        "rag_manager": {
            "RAGManager": {
                "retrieve": "no prompts",
                "_load_from_directory": "no prompts",
                "update_rag_from_directory": "no prompts"
            }
        },
        "container_manager": {
            "ContainerManager": {
                "start_container": "no prompts",
                "stop_container": "no prompts",
                "get_container_status": "no prompts",
                "remove_container": "no prompts"
            },
            "DockerManager": {
                "start_container": "no prompts",
                "stop_container": "no prompts",
                "get_container_status": "no prompts",
                "_remove_container": "no prompts",
                "_create_network": "no prompts",
                "_create_volume": "no prompts",
                "_pull_image": "no prompts",
                "_start_daemon": "no prompts",
                "_ensure_client": "no prompts",
                "remove_container": "no prompts",
                "_remove_container_if_exists": "no prompts"
            }
        }
    },
    "cli": {
        "collect": {},
        "pm": {},
        "container": {},
        "parse": {},
        "es_parse": {}
    }
}