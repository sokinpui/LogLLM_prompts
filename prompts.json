{
    "logllm": {
        "__main__": {},
        "agents": {
            "parser_agent": {
                "SimpleDrainLogParserState": {},
                "SimpleDrainLogParserAgent": {
                    "run": "no prompts",
                    "_generate_log_format": "You are an expert log analysis assistant tasked with generating accurate Drain log format strings. Drain uses these formats to tokenize log messages. The format string uses tags like `<Date>`, `<Time>`, `<Level>`, `<Component>`, `<PID>`, `<Thread>`, `<SourceFile>`, `<SourceLine>`, and `<Content>` to represent static parts or consistently structured fields.\n\n### Key Principles:\n1. **Identify Static vs. Variable:**\n   Tags represent static text or consistently structured fields. Everything else that varies unpredictably between messages (specific error messages, user data, dynamic values, full stack traces) should typically fall into ONE final `<Content>` tag.\n2. **Use Specific Tags:**\n   If a field has a consistent meaning and structure (like date, time, level, PID, thread name in brackets), use a specific tag (e.g., `<Date>`, `<Time>`, `<Level>`, `<PID>`, `<Thread>`). Java class names (e.g., `org.apache.hadoop...`) or source file/line info can often be tagged as `<Component>` or `<SourceFile>`/`<SourceLine>` if consistent.\n3. **`<Content>` is Catch-all:**\n   The `<Content>` tag is crucial. It should capture the *remainder* of the log message after all preceding static text and tagged fields. Avoid multiple generic `<Content>` tags unless they represent clearly distinct and consistently *structured* variable fields across *all* log lines.\n4. **Include Literals:**\n   Keep consistent literal characters (like `[]`, `:`, `-`) in the format string if they appear consistently across log lines.\n\n### Common Tags:\n- `<Date>`: YYYY-MM-DD, MM/DD/YY, etc.\n- `<Time>`: HH:MM:SS, HH:MM:SS,ms, etc.\n- `<Level>`: INFO, WARN, ERROR, DEBUG, etc.\n- `<Component>`: Module name, Class name (e.g., `org.apache.hadoop.hdfs.server.namenode.FSNamesystem`), source file.\n- `<PID>`: Process ID (numeric).\n- `<Thread>`: Thread name (often in brackets like `[main]`).\n- `<SourceFile>`: Source file name (e.g., `FSNamesystem.java`).\n- `<SourceLine>`: Line number (e.g., `L123`).\n- `<Content>`: The remaining variable part of the message.\n\n### Good Examples:\n- Log: `\"2015-10-17 18:09:41,877 INFO [main] org.apache.hadoop.metrics2.impl.MetricsConfig: loaded properties from hadoop-metrics2.properties\"`\n  Format: `\"<Date> <Time> <Level> [<Thread>] <Component>: <Content>\"`\n- Log: `\"2015-07-29 17:41:41,536 - INFO  [main:QuorumPeerConfig@101] - Reading configuration from: /etc/zookeeper/conf/zoo.cfg\"`\n  Format: `\"<Date> <Time> - <Level>  [<Thread>:<Component>@<SourceLine>] - <Content>\"`\n- Log: `\"[Thu Oct 15 14:35:07 2023] [error] [client 1.2.3.4] File does not exist: /var/www/html/favicon.ico\"`\n  Format: `\"[<Date> <Time>] [<Level>] [client <IP>] <Content>\"`\n\n### Bad Example (Avoid This):\n- Log: `\"123 INFO ServiceA Starting up now\"`\n  Incorrect Format: `\"<PID> <Level> <Component> <Content> <Content>\"` (Multiple generic `<Content>` tags are usually wrong)\n  Better Format: `\"<PID> <Level> <Component> <Content>\"`\n\n### Task:\nBelow are sample log messages from a specific file:\n`{sample_logs}`\n\nAnalyze the consistent structure in the *sample logs provided above*. Generate the single, most accurate Drain log format string based on these samples, following the principles outlined. Pay close attention to consistent separators and fields. Ensure variable parts are correctly captured, primarily by the final `<Content>` tag. Output *only* the generated log format string, nothing else.\n",
                    "_run_drain_parser": "no prompts"
                },
                "GroupLogParserAgent": {
                    "fetch_groups": "no prompts",
                    "parse_all_logs": "no prompts",
                    "_update_progress_bar": "no prompts",
                    "run": "no prompts"
                },
                "schema": {}
            },
            "agent_abc": {
                "Agent": {
                    "_build_graph": "no prompts",
                    "run": "no prompts"
                }
            }
        }
    }
}