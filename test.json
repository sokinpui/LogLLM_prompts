{
    "tests": {
        "t": {
            "TextClass": {
                "run": "# Project logLLM\n\n**logLLM** is a multi-agent system designed to process and analyze log data using a collaborative agent-based workflow. This repository provides a modular framework integrating various agents, a central orchestration layer, and utility tools to streamline development and deployment.\n\n## Table of Contents\n- [Overview](#overview)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Running the Main Workflow](#running-the-main-workflow)\n  - [Managing Prompts with PromptsManager](#managing-prompts-with-promptsmanager)\n- [Documentation](#documentation)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Overview\nThis project leverages a multi-agent architecture orchestrated by `graph.py`, supported by configuration management, utility functions, and a robust prompt management system. Key components include:\n\n- **Agents**: Specialized modules for specific tasks (see [agents.md](./doc/agents.md)).\n- **Graph**: The main entry point integrating agents into a unified workflow (see [graph.md](./doc/graph.md)).\n- **Configurations**: Centralized settings for logging, Docker, and databases (see [configurations.md](./doc/configurable.md)).\n- **Utilities**: Helper classes and functions for core functionality (see [utils.md](./doc/utils.md)).\n- **Prompt Manager**: A tool to generate, store, manage, and version-control prompts in a JSON file (default: `prompts/prompts.json`, customizable via `-j/--json`), designed for broad use across the project with Git-based version tracking (see [prompt_manager.md](./doc/prompts_manager.md)).\n\n## Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/yourusername/logLLM.git\n   cd logLLM\n   ```\n\n2. **Set Up a Virtual Environment** (optional but recommended):\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n\n3. **Install Dependencies**:\n   ```bash\n   pip install -r requirements.txt\n   ```\n   *Note*: `prompts_manager.py` requires only standard Python libraries (`os`, `ast`, `json`, `argparse`, `re`, `inspect`, `subprocess`, `datetime`, and `typing`) but needs `git` installed and accessible in the system PATH for version control features.\n\n4. **Project Structure**:\n   ```\n   logLLM/\n   \u251c\u2500\u2500 agents/            # Agent implementations\n   \u251c\u2500\u2500 prompts/           # Stores prompts.json and test.json (Git-managed)\n   \u251c\u2500\u2500 utils/             # Utility modules, including prompts_manager.py\n   \u251c\u2500\u2500 graph.py           # Main workflow orchestration\n   \u251c\u2500\u2500 config.py          # Configuration settings\n   \u251c\u2500\u2500 requirements.txt   # Project dependencies\n   \u2514\u2500\u2500 README.md          # This file\n   ```\n\n## Usage\n\n### Running the Main Workflow\nTo execute the core multi-agent system:\n```bash\npython graph.py\n```\nSee [graph.md](./doc/graph.md) for details.\n\n### Managing Prompts with PromptsManager\nThe `PromptsManager` (in `utils/prompts_manager.py`) manages prompts in a JSON file (default: `prompts/prompts.json`, customizable with `-j/--json` or `--test`). It provides a public API for use across agents, scripts, and workflows, with Git-based version control to track changes, list version history, and revert to previous states.\n\n#### Why Use PromptsManager?\n- **Dynamic Prompts**: Retrieve prompts at runtime with `get_prompt`.\n- **Centralized Management**: Store and manage prompts in one JSON file.\n- **Programmatic Control**: Use `list_prompts`, `add_prompt`, `delete_keys`, `list_versions`, and `revert_version` in your code.\n- **Version Control**: Track and revert prompt changes using Git.\n\n#### Quick Start\n1. **Initialize the Prompt Store**:\n   ```bash\n   mkdir -p custom && python utils/prompts_manager.py scan -d agents/ -r -j custom/prompts.json\n   ```\n   *Note*: This initializes a Git repository in `custom/` if not already present.\n\n2. **List Keys**:\n   ```bash\n   python utils/prompts_manager.py list --prompt -j custom/prompts.json\n   ```\n\n3. **Add a Prompt**:\n   ```bash\n   python utils/prompts_manager.py add -k agents.module.AgentClass.method -v \"Process {data}\" -j custom/prompts.json\n   ```\n   *Note*: Changes are automatically committed to the Git repository in `custom/`.\n\n4. **View Version History**:\n   ```bash\n   python utils/prompts_manager.py version -k agents.module.AgentClass.method --verbose -1 -j custom/prompts.json\n   ```\n   **Output**:\n   ```\n   Version history for 'agents.module.AgentClass.method' in custom/prompts.json:\n     - 2025-03-18T10:00:00 | abc12345 | Update prompts.json at 2025-03-18T10:00:00 | Prompt: Process {data}\n   ```\n\n5. **Revert a Prompt**:\n   ```bash\n   python utils/prompts_manager.py revert -c abc12345 -k agents.module.AgentClass.method --verbose -1 -j custom/prompts.json\n   ```\n   **Output**:\n   ```\n   Reverted 'agents.module.AgentClass.method' to version from commit abc12345: 'Process {data}'\n   Current custom/prompts.json content:\n   {...}\n   ```\n\n6. **Use in Code**:\n   ```python\n   from utils.prompts_manager import PromptsManager\n\n   class AgentClass:\n       def __init__(self):\n           json_path = \"custom/prompts.json\" if custom else \"prompts/prompts.json\"\n           self.pm = PromptsManager(json_file=json_path)\n\n       def method(self, data):\n           # List prompts and versions\n           prompts = self.pm.list_prompts(only_prompts=True)\n           history = self.pm.list_versions(\"agents.module.AgentClass.method\", verbose=-1)\n           print(\"Prompts:\", prompts)\n           print(\"History:\", history)\n           return self.pm.get_prompt(data=data)\n\n   custom = True  # Toggle for custom file\n   agent = AgentClass()\n   print(agent.method(\"log data\"))  # \"Process log data\"\n   ```\n\n7. **Delete Keys**:\n   ```bash\n   python utils/prompts_manager.py delete -k agents.module.AgentClass.method -j custom/prompts.json\n   ```\n\n#### CLI Commands\n- **Scan**: `python utils/prompts_manager.py scan -d <DIR> [-r] [--hard] [--verbose] [-j PATH] [--test]`\n  - Scans a directory, updates the prompt store, and commits changes to Git.\n- **List**: `python utils/prompts_manager.py list [--prompt] [--verbose] [-j PATH] [--test]`\n  - Lists keys in the prompt store.\n- **Add**: `python utils/prompts_manager.py add -k <KEY> -v <VALUE> [--verbose] [-j PATH] [--test]`\n  - Adds/updates a prompt and commits to Git.\n- **Delete**: `python utils/prompts_manager.py delete -k <KEY1> <KEY2> ... [--verbose] [-j PATH] [--test]`\n  - Deletes keys and commits to Git.\n- **Version**: `python utils/prompts_manager.py version [-k <KEY>] [--verbose [N]] [-j PATH] [--test]`\n  - Lists Git commit history for the file or a key. `--verbose N` shows the first `N` characters of prompts (default: 50; -1 for full).\n- **Revert**: `python utils/prompts_manager.py revert -c <HASH> [-k <KEY>] [--verbose [N]] [-j PATH] [--test]`\n  - Reverts the file or a key to a commit and commits the revert. `--verbose N` shows the first `N` characters of the reverted prompt (default: 50; -1 for full; non-default also prints full JSON).\n\n#### Customizing with `-j/--json`\nSpecify a custom JSON file path with `-j/--json` (directory must exist; initialized as a Git repository if not already):\n```bash\nmkdir -p custom && python utils/prompts_manager.py scan -d agents/ -j custom/prompts.json --verbose\n```\n\n#### Testing with `--test`\nUse `--test` for `prompts/test.json` (overridden by `-j/--json`):\n```bash\npython utils/prompts_manager.py scan -d agents/ --test\n```\n\n#### Version Control Notes\n- The directory containing the JSON file (e.g., `prompts/` or `custom/`) is managed as a separate Git repository.\n- To avoid tracking it in the parent `logLLM` repo, add it to `.gitignore`:\n  ```\n  prompts/\n  custom/\n  ```\n- Alternatively, integrate it as a Git submodule:\n  ```bash\n  git submodule add <url> prompts\n  ```\n\nSee [prompt_manager.md](./doc/prompts_manager.md) for full details.\n\n## Documentation\n- **[agents.md](./doc/agents.md)**: Agent details.\n- **[graph.md](./doc/graph.md)**: Workflow overview.\n- **[configurations.md](./doc/configurable.md)**: Config settings.\n- **[utils.md](./doc/utils.md)**: Utility documentation.\n- **[prompt_manager.md](./doc/prompts_manager.md)**: Prompt management guide, including version control.\n\n## Contributing\nContributions are welcome! Please:\n1. Fork the repository.\n2. Create a feature branch (`git checkout -b feature/xyz`).\n3. Commit changes (`git commit -m \"Add xyz feature\"`).\n4. Push to the branch (`git push origin feature/xyz`).\n5. Open a pull request.\n\n## License\n[MIT License](./LICENSE) - feel free to use, modify, and distribute this project.\n",
                "test_manual": "no prompts"
            }
        },
        "subdir": {
            "nested": {
                "NestedClass": {
                    "run": "no prompts"
                }
            },
            "asdf": {}
        }
    },
    "agents": {
        "linear_analyze_agent": {
            "LinearAnalyzeAgentState": {},
            "LinearAnalyzeAgent": {
                "run": "no prompts",
                "_build_graph": "no prompts",
                "is_done": "no prompts",
                "is_working_file_done": "no prompts",
                "get_chunk": "no prompts",
                "chunk_analysis": "no prompts",
                "memorize": "no prompts",
                "pop_file_id": "no prompts",
                "setup_working_file": "no prompts"
            }
        },
        "gen_query_agent": {},
        "pre_process_agent": {
            "PreProcessAgentState": {},
            "PreProcessAgent": {
                "run": "no prompts",
                "_build_graph": "no prompts",
                "_list_to_indices": "no prompts",
                "interpre_event": "no prompts",
                "gen_search_query": "no prompts",
                "search_in_db": "no prompts",
                "search_feedback": "no prompts"
            },
            "schema": {}
        },
        "reasoning_agent": {
            "State": {},
            "ReasoningAgent": {
                "run": "no prompts",
                "_build_graph": "no prompts",
                "get_prompt": "no prompts",
                "is_question": "no prompts",
                "parse_input": "no prompts",
                "context_understanding": "no prompts",
                "determine_goal": "no prompts",
                "decompose_question": "no prompts",
                "solve_sub_question": "no prompts",
                "is_sub_question_empty": "no prompts",
                "combine_sub_answer": "no prompts",
                "formulate_response": "no prompts"
            },
            "Schema": {}
        },
        "agent_abc": {
            "Agent": {
                "_build_graph": "no prompts",
                "run": "after add utils"
            }
        }
    },
    "utils": {
        "data_struct": {
            "BaseData": {
                "to_dict": "no prompts"
            },
            "LineOfLogFile": {
                "to_dict": "no prompts"
            },
            "LastLineRead": {},
            "LogFile": {
                "add_file_description": "no prompts",
                "to_dict": "no prompts",
                "get_total_lines": "no prompts",
                "get_snapshot": "no prompts"
            },
            "Event": {
                "to_dict": "no prompts"
            }
        },
        "database": {
            "Database": {
                "insert": "no prompts",
                "single_search": "no prompts",
                "update": "no prompts",
                "delete": "no prompts",
                "set_vector_store": "no prompts"
            },
            "ElasticsearchDatabase": {
                "insert": "no prompts",
                "single_search": "no prompts",
                "scroll_search": "no prompts",
                "update": "no prompts",
                "delete": "no prompts",
                "_connect": "no prompts",
                "set_vector_store": "no prompts",
                "random_sample": "no prompts",
                "add_alias": "no prompts",
                "count_docs": "no prompts",
                "get_unique_values_composite": "no prompts",
                "get_unique_values": "no prompts"
            }
        },
        "collector": {
            "Collector": {
                "collect_logs": "no prompts",
                "collect_events": "no prompts",
                "insert_events_to_db": "no prompts",
                "insert_logs_to_db": "no prompts",
                "insert_very_large_logs_into_db": "no prompts",
                "_get_last_line_read": "no prompts",
                "_save_last_line_read": "no prompts",
                "_clear_records": "no prompts"
            }
        },
        "chunk_manager": {
            "ESTextChunkManager": {
                "_build_chunk": "no prompts",
                "_get_all_hits": "no prompts",
                "is_end": "no prompts",
                "get_next_chunk": "no prompts",
                "get_current_chunk": "no prompts"
            }
        },
        "logger": {
            "Logger": {
                "info": "no prompts",
                "debug": "no prompts",
                "warning": "no prompts",
                "error": "no prompts",
                "critical": "no prompts"
            }
        },
        "llm_model": {
            "LLMModel": {
                "generate": "no prompts",
                "token_count": "no prompts"
            },
            "GeminiModel": {
                "token_count": "no prompts",
                "generate": "no prompts"
            },
            "QwenModel": {
                "token_count": "no prompts",
                "generate": "no prompts"
            }
        },
        "rag_manager": {
            "RAGManager": {
                "retrieve": "no prompts",
                "_load_from_directory": "no prompts",
                "update_rag_from_directory": "no prompts"
            }
        },
        "container_manger": {
            "ContainerManager": {
                "start_container": "no prompts",
                "stop_container": "no prompts",
                "get_container_status": "no prompts"
            },
            "DockerManager": {
                "start_container": "no prompts",
                "stop_container": "no prompts",
                "get_container_status": "no prompts",
                "_remove_container": "no prompts",
                "_create_network": "no prompts",
                "_create_volume": "no prompts",
                "_pull_image": "no prompts",
                "_start_daemon": "no prompts"
            }
        },
        "prompts_manager": {
            "prompts_manager": {
                "PromptsManager": {
                    "_ensure_git_repo": "no prompts",
                    "_load_prompts": "no prompts",
                    "_save_prompts": "no prompts",
                    "_update_prompt_store": "no prompts",
                    "_update_prompt_store_recursive": "no prompts",
                    "_hard_update_prompt_store": "no prompts",
                    "_hard_update_prompt_store_recursive": "no prompts",
                    "_get_nested_value": "no prompts",
                    "_set_nested_value": "no prompts",
                    "list_prompts": "no prompts",
                    "add_prompt": "no prompts",
                    "delete_keys": "no prompts",
                    "_search_prompt_recursive": "no prompts",
                    "get_prompt": "no prompts",
                    "list_versions": "no prompts",
                    "revert_version": "no prompts"
                }
            }
        }
    }
}